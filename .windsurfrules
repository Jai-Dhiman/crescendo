// Crescendo Piano Platform - AI Assistant Guidelines

// Project Overview
// Crescendo: AI-powered piano practice assistant.
// Core: AI coach for personalized guidance, practice management, sheet music viewing.
// Goal: Minimalist, mobile-first UI focusing on the AI interaction.

// Technology Stack
// Frontend: SvelteKit (TypeScript)
// Styling: Tailwind CSS, Shadcn-ui (Svelte port), Lucide Icons
// Backend/DB: Convex (Database, Functions, Auth, Storage, Realtime)
// AI: Google Gemini API (via Convex functions)
// PDF: PDF.js
// Package Manager: bun

// Key Architectural Patterns
// - SvelteKit routing: +page.svelte (UI), +page.server.ts (server logic).
// - State: Svelte stores for client-side, Convex as the source of truth.
// - Data Fetching: Convex queries/mutations via ConvexClient.
// - Authentication: Convex Auth.
// - File Storage: Convex Storage for PDFs.

// Code Style & Conventions
// - Naming: PascalCase (Components), camelCase (functions/variables), kebab-case.svelte (files).
// - Exports: Use named exports.
// - Async: Prefer async/await.
// - Types: Use TypeScript interfaces (props, data structures).
// - Indentation: Tabs (JS/TS).
// - Tailwind: Use utility classes directly. Create custom CSS sparingly.
// - Shadcn-ui (Svelte):
//    - Use the `cn()` utility for merging classes (`clsx`, `tailwind-merge`).
//    - Import components from `$lib/components/ui/...`.
//    - Customize styles via CSS variables when possible.
//    - Leverage composition and slots.
//    - Ensure accessibility attributes are maintained/used.

// Convex Integration
// - Location: All Convex code in `convex/`. Schema in `convex/schema.ts`.
// - Functions: Use `query` vs `mutation` appropriately.
// - API Keys: Manage via environment variables (`.env.local`), access in Convex functions. Never hardcode secrets.
// - Generated API: `convex/_generated/api.js` (do not edit manually).

// AI Feature Focus
// - AI Coach: Central conversational UI.
// - Practice Logs: Structure with date, duration, focus (AI-driven).
// - Sheet Music: PDF viewing via Convex Storage, AI-assisted navigation.
// - Timers: Integrate AI suggestions with practice timers.

// General Guidance
// - Follow existing patterns in the codebase.
// - Prioritize clarity, maintainability, and type safety.
// - Keep API keys secure.
// - Ensure Convex functions handle errors gracefully.